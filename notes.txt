Approaches to Path Planning
---------------------------

Three different approaches to path planning. 

1. discrete (or combinatorial) path planning, is the most straightforward of the three approaches. 
2. sample-based path planning 
3. probabilistic path planning
both will build on the foundation of discrete planning to develop more widely applicable path planning solutions.

---------------------------------------------------------------------------------------------------------------------------------------
Discrete Planning:

Discrete planning looks to explicitly discretize the robot’s workspace into a connected graph, and apply a graph-search algorithm to calculate the best path. 
This procedure is very precise (in fact, the precision can be adjusted explicitly by changing how fine you choose to discretize the space) and very thorough, as it discretizes the complete workspace. 
As a result, discrete planning can be very computationally expensive - possibly prohibitively so for large path planning problems.
Discrete path planning is elegant in its preciseness, but is best suited for low-dimensional problems. For high-dimensional problems, sample-based path planning is a more appropriate approach.

three steps:
1. develop a continuous representation 
2. configuration space must be discretized
3. graph search

Minkowski Sum
The Minkowski sum is a mathematical property that can be used to compute the configuration space given an obstacle geometry and robot geometry.
The intuition behind how the Minkowski sum is calculated can be understood by imagining to paint the outside of an obstacle using a paintbrush that is shaped like your robot, with the robot’s origin as the tip of the paintbrush.

---------------------------------------------------------------------------------------------------------------------------------------
Sample-Based Planning:

Sample-based path planning probes the workspace to incrementally construct a graph. 
Instead of discretizing every segment of the workspace, sample-based planning takes a number of samples and uses them to build a discrete representation of the workspace. 
The resultant graph is not as precise as one created using discrete planning, but it is much quicker to construct because of the relatively small number of samples used.
A path generated using sample-based planning may not be the best path, but in certain applications - it’s better to generate a feasible path quickly than to wait hours or even days to generate the optimal path.

---------------------------------------------------------------------------------------------------------------------------------------

Probabilistic Path Planning:

While the first two approaches looked at the path planning problem generically - with no understanding of who or what may be executing the actions - probabilistic path planning takes into account the uncertainty of the robot’s motion.
While this may not provide significant benefits in some environments, it is especially helpful in highly-constrained environment or environments with sensitive or high-risk areas.

---------------------------------------------------------------------------------------------------------------------------------------
3D Configuration Space

the configuration space for a robot changes depending on its rotation.
Allowing a robot to rotate adds a degree of freedom - so, sensibly, it complicates the configuration space as well. 
Luckily, this is actually very simple to handle. The dimension of the configuration space is equal to the number of degrees of freedom that the robot has.
While a 2D configuration space was able to represent the x- and y-translation of the robot, a third dimension is required to represent the rotation of the robot.

---------------------------------------------------------------------------------------------------------------------------------------
Discretization - process of breaking down a continuous entity (configuration space) into discrete segments.

1. Roadmap
2. cell decomposition 
3. Gradient field
---------------------------------------------------------------------------------------------------------------------------------------
Roadmap
--------

These methods represent the configuration space using a simple connected graph - similar to how a city can be represented by a metro map.
Roadmap methods are typically implemented in two phases:

The construction phase builds up a graph from a continuous representation of the space. 
This phase usually takes a significant amount of time and effort, but the resultant graph can be used for multiple queries with minimal modifications.
ices, and goal node to each other - exce
The query phase evaluates the graph to find a path from a start location to a goal location. This is done with the help of a search algorithm.
----------------
Visibility Graph

The Visibility Graph builds a roadmap by connecting the start node, all of the obstacles’ vertices, and goal node to each other - except those that would result in collisions with obstacles. 
The Visibility Graph has its name for a reason - it connects every node to all other nodes that are ‘visible’ from its location.

Nodes: Start, Goal, and all obstacle vertices.

Edges: An edge between two nodes that does not intersect an obstacle, including obstacle edges.

The motivation for building Visibility Graphs is that the shortest path from the start node to the goal node will be a piecewise linear path that bends only at the obstacles’ vertices. 
This makes sense intuitively - the path would want to hug the obstacles’ corners as tightly as possible, as not to add any additional length.

One disadvantage to the Visibility Graph is that it leaves no clearance for error. 
A robot traversing the optimal path would have to pass incredibly close to obstacles, increasing the risk of collision significantly.

---------------
Voronoi Diagram

Another discretization method that generates a roadmap is called the Voronoi Diagram. 
Unlike the visibility graph method which generates the shortest paths, Voronoi Diagrams maximize clearance between obstacles.

A Voronoi Diagram is a graph whose edges bisect the free space in between obstacles. 
Every edge lies equidistant from each obstacle around it - with the greatest amount of clearance possible. 

Once a Voronoi Diagram is constructed for a workspace, it can be used for multiple queries. 
Start and goal nodes can be connected into the graph by constructing the paths from the nodes to the edge closest to each of them.

Every edge will either be a straight line, if it lies between the edges of two obstacles, or it will be a quadratic, if it passes by the vertex of an obstacle.

---------------------------------------------------------------------------------------------------------------------------------------
Cell Decomposition
------------------

Another discretization method that can be used to convert a configuration space into a representation that can easily be explored by a search algorithm is cell decomposition. 
Cell decomposition divides the space into discrete cells, where each cell is a node and adjacent cells are connected with edges. 
There are two distinct types of cell decomposition:

Exact Cell Decomposition
-------------------------

Exact cell decomposition divides the space into non-overlapping cells. 
This is commonly done by breaking up the space into triangles and trapezoids, which can be accomplished by adding vertical line segments at every obstacle’s vertex.
Once a space has been decomposed, the resultant graph can be used to search for the shortest path from start to goal. 

Exact cell decomposition is elegant because of its precision and completeness. 
Every cell is either ‘full’, meaning it is completely occupied by an obstacle, or it is ‘empty’, meaning it is free. 
And the union of all cells exactly represents the configuration space. If a path exists from start to goal, the resultant graph will contain it.

To implement exact cell decomposition, the algorithm must order all obstacle vertices along the x-axis, and then for every vertex determine whether a new cell must be created or whether two cells should be merged together. 
Such an algorithm is called the Plane Sweep algorithm. Exact cell decomposition results in cells of awkward shapes. 
Collections of uniquely-shaped trapezoids and triangles are more difficult to work with than a regular rectangular grid. This results in an added computational complexity, especially for environments with greater numbers of dimensions. 
It is also difficult to compute the decomposition when obstacles are not polygonal, but of an irregular shape.

Approximate Cell Decomposition
------------------------------

Approximate cell decomposition divides a configuration space into discrete cells of simple, regular shapes - such as rectangles and squares (or their multidimensional equivalents). 
Aside from simplifying the computation of the cells, this method also supports hierarchical decomposition of space

1. Simple Decomposition
-----------------------
A 2-dimensional configuration space can be decomposed into a grid of rectangular cells. Then, each cell could be marked full or empty, as before. 
A search algorithm can then look for a sequence of free cells to connect the start node to the goal node.

Such a method is more efficient than exact cell decomposition, but it loses its completeness. 
It is possible that a particular configuration space contains a feasible path, but the resolution of the cells results in some of the cells encompassing the path to be marked ‘full’ due to the presence of obstacles. 
A cell will be marked ‘full’ whether 99% of the space is occupied by an obstacle or a mere 1%. Evidently, this is not practical.

Iterative Decomposition
-----------------------

An alternate method of partitioning a space into simple cells exists. Instead of immediately decomposing the space into small cells of equal size, the method recursively decomposes a space into four quadrants. 
Each quadrant is marked full, empty, or a new label called ‘mixed’ - used to represent cells that are somewhat occupied by an obstacle, but also contain some free space. 
If a sequence of free cells cannot be found from start to goal, then the mixed cells will be further decomposed into another four quadrants. 
Through this process, more free cells will emerge, eventually revealing a path if one exists.

----------
Algorithm
----------
The algorithm behind approximate cell decomposition is much simpler than the exact cell decomposition algorithm. The pseudocode for the algorithm is provided below.

Decompose the configuration space into four cells, label cells free, mixed, or full.

Search for a sequence of free cells that connect the start node to the goal node.

If such a sequence exists:

    Return path

Else:

    Further decompose the mixed cells

Note: 
-----
Although exact cell decomposition is a more elegant method, it is much more computationally expensive than approximate cell decomposition for non-trivial environments. 
For this reason, approximate cell decomposition is commonly used in practice. With enough computation, approximate cell decomposition approaches completeness. 
However, it is not optimal - the resultant path depends on how cells are decomposed. Approximate cell decomposition finds the obvious solution quickly. 
It is possible that the optimal path squeezes through a minuscule opening between obstacles, but the resultant path takes a much longer route through wide open spaces - one that the recursively-decomposing algorithms would find first.
Approximate cell decomposition is functional, but like all discrete/combinatorial path planning methods - it starts to be computationally intractable for use with high-dimensional environments.
---------------------------------------------------------------------------------------------------------------------------------------

Potential Field
----------------

Onto the last discretization method - potential field method. 
Unlike the methods discussed thus far that discretize the continuous space into a connected graph, the potential field method performs a different type of discretization.
To accomplish its task, the potential field method generates two functions - one that attracts the robot to the goal and one that repels the robot away from obstacles. 
The two functions can be summed to create a discretized representation. By applying an optimization algorithm such as gradient descent, a robot can move toward the goal configuration while steering around obstacles. 

Attractive Potential Field
---------------------------
The attractive potential field is a function with the global minimum at the goal configuration. If a robot is placed at any point and required to follow the direction of steepest descent, it will end up at the goal configuration. 
This function does not need to be complicated, a simple quadratic function can achieve all of the requirements discussed above.


f_att(x) = ν_att(∣∣x−x_goal∣∣)^2
 
Where x represents the robot’s current position, and x_goal the goal position, ν is a scaling factor.

Repulsive Potential Field
-------------------------
The repulsive potential field is a function that is equal to zero in free space, and grows to a large value near obstacles. 

f_rep = ⎧   ν_rep( 1/ρ(x) − 1/ρ0 )^2    if ρ ≤ ρ0
        ⎨
        ⎩   0                           if ρ > ρ0
​
Where the function ρ(x) returns the distance from the robot to its nearest obstacle, 
ρ0 is a scaling parameter that defines the reach of an obstacle’s repulsiveness, and ν is a scaling parameter.
  

The value ρ0 controls how far from an obstacle the potential field will be non-zero, and how steep the area surrounding an obstacle will be.
Past ρ0, the potential field is zero. Within a ρ0 distance of the obstacle, the potential field scales with proximity to the obstacle.
 
​Potential Field Sum
The attractive and repulsive functions are summed to produce the potential field that is used to guide the robot from anywhere in the space to the goal.


Problems with the Potential Field Method
----------------------------------------
The potential field method is not without its faults - the method is neither complete nor optimal. 
In certain environments, the method will lead the robot to a local minimum, as opposed to the global minimum.
The problem of a robot becoming stuck in a local minimum can be resolved by adding random walks, and other strategies that are commonly applied to gradient descent, but ultimately the method is not complete.
The potential field method isn’t optimal either, as it may not always find the shortest (or cheapest) path from start to goal. The shortest path may not follow the path of steepest descent. 
In addition, potential field does not take into consideration the cost of every step.


---------------------------------------------------------------------------------------------------------------------------------------
