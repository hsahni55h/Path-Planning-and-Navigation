Approaches to Path Planning
---------------------------

Three different approaches to path planning. 

1. discrete (or combinatorial) path planning, is the most straightforward of the three approaches. 
2. sample-based path planning 
3. probabilistic path planning
both will build on the foundation of discrete planning to develop more widely applicable path planning solutions.

---------------------------------------------------------------------------------------------------------------------------------------
Discrete Planning:

Discrete planning looks to explicitly discretize the robot’s workspace into a connected graph, and apply a graph-search algorithm to calculate the best path. 
This procedure is very precise (in fact, the precision can be adjusted explicitly by changing how fine you choose to discretize the space) and very thorough, as it discretizes the complete workspace. 
As a result, discrete planning can be very computationally expensive - possibly prohibitively so for large path planning problems.
Discrete path planning is elegant in its preciseness, but is best suited for low-dimensional problems. For high-dimensional problems, sample-based path planning is a more appropriate approach.

three steps:
1. develop a continuous representation 
2. configuration space must be discretized
3. graph search

Minkowski Sum
The Minkowski sum is a mathematical property that can be used to compute the configuration space given an obstacle geometry and robot geometry.
The intuition behind how the Minkowski sum is calculated can be understood by imagining to paint the outside of an obstacle using a paintbrush that is shaped like your robot, with the robot’s origin as the tip of the paintbrush.

---------------------------------------------------------------------------------------------------------------------------------------
Sample-Based Planning:

Sample-based path planning probes the workspace to incrementally construct a graph. 
Instead of discretizing every segment of the workspace, sample-based planning takes a number of samples and uses them to build a discrete representation of the workspace. 
The resultant graph is not as precise as one created using discrete planning, but it is much quicker to construct because of the relatively small number of samples used.
A path generated using sample-based planning may not be the best path, but in certain applications - it’s better to generate a feasible path quickly than to wait hours or even days to generate the optimal path.

---------------------------------------------------------------------------------------------------------------------------------------

Probabilistic Path Planning:

While the first two approaches looked at the path planning problem generically - with no understanding of who or what may be executing the actions - probabilistic path planning takes into account the uncertainty of the robot’s motion.
While this may not provide significant benefits in some environments, it is especially helpful in highly-constrained environment or environments with sensitive or high-risk areas.

---------------------------------------------------------------------------------------------------------------------------------------
3D Configuration Space

the configuration space for a robot changes depending on its rotation.
Allowing a robot to rotate adds a degree of freedom - so, sensibly, it complicates the configuration space as well. 
Luckily, this is actually very simple to handle. The dimension of the configuration space is equal to the number of degrees of freedom that the robot has.
While a 2D configuration space was able to represent the x- and y-translation of the robot, a third dimension is required to represent the rotation of the robot.

---------------------------------------------------------------------------------------------------------------------------------------
Discretization - process of breaking down a continuous entity (configuration space) into discrete segments.

1. Roadmap
2. cell decomposition 
3. Gradient field
---------------------------------------------------------------------------------------------------------------------------------------
Roadmap
--------

These methods represent the configuration space using a simple connected graph - similar to how a city can be represented by a metro map.
Roadmap methods are typically implemented in two phases:

The construction phase builds up a graph from a continuous representation of the space. 
This phase usually takes a significant amount of time and effort, but the resultant graph can be used for multiple queries with minimal modifications.
ices, and goal node to each other - exce
The query phase evaluates the graph to find a path from a start location to a goal location. This is done with the help of a search algorithm.
----------------
Visibility Graph

The Visibility Graph builds a roadmap by connecting the start node, all of the obstacles’ vertices, and goal node to each other - except those that would result in collisions with obstacles. 
The Visibility Graph has its name for a reason - it connects every node to all other nodes that are ‘visible’ from its location.

Nodes: Start, Goal, and all obstacle vertices.

Edges: An edge between two nodes that does not intersect an obstacle, including obstacle edges.

The motivation for building Visibility Graphs is that the shortest path from the start node to the goal node will be a piecewise linear path that bends only at the obstacles’ vertices. 
This makes sense intuitively - the path would want to hug the obstacles’ corners as tightly as possible, as not to add any additional length.

One disadvantage to the Visibility Graph is that it leaves no clearance for error. 
A robot traversing the optimal path would have to pass incredibly close to obstacles, increasing the risk of collision significantly.

---------------
Voronoi Diagram

Another discretization method that generates a roadmap is called the Voronoi Diagram. 
Unlike the visibility graph method which generates the shortest paths, Voronoi Diagrams maximize clearance between obstacles.

A Voronoi Diagram is a graph whose edges bisect the free space in between obstacles. 
Every edge lies equidistant from each obstacle around it - with the greatest amount of clearance possible. 

Once a Voronoi Diagram is constructed for a workspace, it can be used for multiple queries. 
Start and goal nodes can be connected into the graph by constructing the paths from the nodes to the edge closest to each of them.

Every edge will either be a straight line, if it lies between the edges of two obstacles, or it will be a quadratic, if it passes by the vertex of an obstacle.

---------------------------------------------------------------------------------------------------------------------------------------
Cell Decomposition
------------------





---------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------
