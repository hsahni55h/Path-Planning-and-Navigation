Sample based Path planning


The complexity of the path planning problem increases exponentially with the number of dimensions in the C-space.

For a 2-dimensional 8-connected space, every node has 8 successors (8-connected means that from every cell you can move laterally or diagonally). 
Imagine a 3-dimensional 8-connected space, how many successors would every node have? 26. 
As the dimension of the C-space grows, the number of successors that every cell has increases substantially. 
In fact, for an n-dimensional space, it is equal to (3^n -1).

Aside from robots with many degrees of freedom and multi-robot systems, another computational difficulty involves working with robots that have constrained dynamics. 
For instance, a car is limited in its motion - it can move forward and backward, and it can turn with a limited turning radius.

Robotic systems can be classified into two different categories - holonomic and non-holonomic. 
=> Holonomic systems can be defined as systems where every constraint depends exclusively on the current pose and time, and not on any derivatives with respect to time. 
=> Nonholonomic systems, on the other hand, are dependent on derivatives. 
Path planning for nonholonomic systems is more difficult due to the added constraints.

Weakening Requirements
Combinatorial path planning algorithms are too inefficient to apply in high-dimensional environments, which means that some practical compromise is required to solve the problem! 
Instead of looking for a path planning algorithm that is both complete and optimal, what if the requirements of the algorithm were weakened?

Instead of aspiring to use an algorithm that is complete, the requirement can be weakened to use an algorithm that is probabilistically complete. 
A probabilistically complete algorithm is one who’s probability of finding a path, if one exists, increases to 1 as time goes to infinity.

Similarly, the requirement of an optimal path can be weakened to that of a feasible path. 
A feasible path is one that obeys all environmental and robot constraints such as obstacles and motion constraints. 
For high-dimensional problems with long computational times, it may take unacceptably long to find the optimal path, whereas a feasible path can be found with relative ease. 
Finding a feasible path proves that a path from start to goal exists, and if needed, the path can be optimized locally to improve performance.

Sample-based planning is probabilistically complete and looks for a feasible path instead of the optimal path.

Sample-based path planning differs from combinatorial path planning in that it does not try to systematically discretize the entire configuration space. 
Instead, it samples the configuration space randomly (or semi-randomly) to build up a representation of the space. 
The resultant graph is not as precise as one created using combinatorial planning, but it is much quicker to construct because of the relatively small number of samples used.
Such a method is probabilistically complete because as time passes and the number of samples approaches infinity, the probability of finding a path, if one exists, approaches 1.
Such an approach is very effective in high-dimensional spaces, however it does have some downfalls. Sampling a space uniformly is not likely to reach small or narrow areas. 
It is critical that a sufficient number of samples to go from star to goal, or the algorithm will return ‘no solution found’ to a problem that clearly has a solution.

Different sample-based planning approaches exist, each with their own benefits and downfalls. 

1. Probabilistic Roadmap Method
2. Rapidly Exploring Random Tree Method